// vim: set shiftwidth=4 tabstop=8 softtabstop=4 :
/**
 * original source is at: http://www.malbolge.doleczek.pl/js/main.js
 * partly deobfuscated with:
 * https://lelinhtinh.github.io/de4js/
 */


/**
 * @function download
 * @description
 * Download your browser's Malbolge program with given name.
 */
function download(filename, malbolge_program_str) {
    var n = document.createElement("a");
    document.body.appendChild(n);
    n.setAttribute(
	"href",
	"data:text/plain;charset=utf-8," + encodeURIComponent(malbolge_program_str)
    );
    n.setAttribute("download", filename);
    n.click();
    n.remove();
}

/**
 * @function flow
 * @description
 * For each @global PROC, if the process is running the run once.
 */
function flow() {
    for (var t = 0; t < PROC.length; t++){
	if (!PROC[t]) {
	    continue;
	}

	// XXX: what does 1 stand for?
	if (1 == PROC[t].state && !PROC[t].pause) {
	    PROC[t].run();
	}

	/**
	 * active terminal is generated by @function newProg
	 */

	// Add rows when required.
	let activeTerminals = $(".active .terminal");
	if ( ! activeTerminals.length ) {
	    continue;
	}
	
	// {HTMLTextAreaElement}
	let [ firstTerminal ] = activeTerminals;

	// XXX: are HTMLTextAreaElement.clientHeight and HTMLTextAreaElement.scrollHeight constant while HTMLTextAreaElement.rows can be variable?
	// XXX: This is kinda stupid to repeat incrementing.
	const { clientHeight, scrollHeight } = firstTerminal;
	const isNotEverythingVisible = clientHeight < scrollHeight;

	const maxRowsToShow = 21;
	const isRowsTooSmall = firstTerminal.rows < maxRowsToShow;

	if ( isNotEverythingVisible && isRowsTooSmall ) {
	    firstTerminal.rows = Math.min(scrollHeight, maxRowsToShow);
	}
    } // for var t in every PROC
    
    // XXX: wtf?
    if ( $(".tab-content .active .raport").length ) {
	raport($(".tab-content .active").attr("rel"));
    }
}

/**
 * @function newProc
 * @description
 * Generate new @class MALBOLGE as new process to @return its ID as {integer}.
 */
function newProc() {
    PROC.push(new MALBOLGE);
    return PROC.length - 1;
}

/**
 * @function loadMalbolgeFile
 * @param t {string} Program name.
 * @description
 * Load preloaded Malbolge program.
 */
function loadMalbolgeFile(name) {
    $.ajax({
	url: "malbolge/" + name + ".malbolge",
	type: "GET",
	success: function (malbolge_src) {
	    newProg(name, malbolge_src);
	    $("#loading").remove();
	    $("html, body").animate({
		scrollTop: 0
	    }, "100", "swing")
	}
    });

    var e = '<div id="loading">Loading file ...</div>';
    switch (LANG) {
    case "pl":
	e = '<div id="loading">Ładowanie pliku ...</div>'
    }

    $("body").append(e)
}

/**
 * @function takeNextStep
 * @description
 * Called every 100ms while a program is running.
 */
function takeNextStep() {
    if ( gen.isDone() ) {
	newProg(
	    gen.str().substr(0, 26),
	    gen.code().match(/.{1,76}/g).join("\n")
	);
	$("#gen").remove();
	return;
    }

    if ( ! gen.isRunning() ) {
	return;
    }
    
    if ( ! $("#gen").length ) {
	$("body").append([
	    '<div id="gen" style="position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: 1000; background: rgba(100,100,100,0.5)">',
		'<div style="position: absolute; width: 800px; height: 320px; top: 0; bottom: 0; left: 0; right: 0; margin: auto; background: rgba(255,255,255,0.8); border: solid 1px #ccc; text-align: center">',
		    '<div id="genState" style="unicode-bidi: embed; font-family: monospace; white-space: pre; font-size: 16px; line-height: 22px; height: 180px; margin: 40px 60px; overflow-y: hidden; overflow-x: auto; text-align: center; font-weight: bold">...</div>',
			'<div id="genPercent" style="float: left; font-size 24px; line-height: 36px; font-weight: bold; color: #aaa; margin: 0 0 0 50px"></div>',
			'<button id="genCancel" class="btn btn-primary pull-right" style="margin: 0 40px">',
			    '<span class="glyphicon glyphicon-cancel"></span>',
			    '<span lang="pl">Anulujm</span>',
			    '<span lang="en">Cancel</span>',
			"</button>",
		"</div>",
	    "</div>"
	].join(""));

	$("#genCancel").click(function () {
	    gen.cancel();
	    $("#gen").remove()
	});
    }

    gen.spinner++;
    $("#genState").html(
	    gen.str()
	    	.substr(0, gen.getN())
	    	.replace(/&/g, "&amp;")
	    	.replace(/</g, "&lt;")
	    	.replace(/>/g, "&gt;")
	    + ["-", "\\", "|", "/"][gen.spinner % 4]
    );

    $("#genPercent").html(gen.percent() + " %");
    gen.nextStep();
    setTimeout(takeNextStep, 100);
}

/**
 * @function newProg
 * @param t {string} Title. XXX: to be surrounded with <span>...</span> HTML tag.
 * @param e {string} Malbolge program source code.
 * @description
 * New Malbolge program as HTML with given title and code.
 */
function newProg(t, e) {
    /**
     * @const n {integer} process id.
     * @const a {string} HTML to be inserted.
     */
    var n = newProc(),
	a = [
	    '<ul class="dropdown-menu" role="menu">',
		'<li><a href="#" class="progRun" proc="' + n + '" title="Ctrl + R">',
		    '<span class="glyphicon glyphicon-play"></span>',
		    '<span lang="pl">Uruchom</span>',
		    '<span lang="en">Run program</span>',
		"</a></li>",

		'<li><a href="#" class="progRename">',
		    '<span class="glyphicon glyphicon-pencil"></span>',
		    '<span lang="pl">Zmień nazwę</span>',
		    '<span lang="en">Change name</span>',
		"</a></li>",

		'<li><a href="#" class="progEcho" title="Ctrl + I">',
		    '<span class="glyphicon glyphicon-edit"></span>',
		    '<span lang="pl">Tekst do kodu</span>',
		    '<span lang="en">Text to code</span>',
		"</a></li>",

		'<li><a href="#" class="progSave" title="Ctrl + S">',
		    '<span class="glyphicon glyphicon-save"></span>',
		    '<span lang="pl">Zapisz</span>',
		    '<span lang="en">Save</span>',
		"</a></li>",

		'<li><a href="#" class="progClose">',
		    '<span class="glyphicon glyphicon-remove"></span>',
		    '<span lang="pl">Zamknij</span>',
		    '<span lang="en">Close</span>',
		"</a></li>",
	    "</ul>"
	].join("\n");

    $("#biblioteka").before([
	'<div role="tabpanel" class="tab-pane" id="prog' + n + '" rel="' + n + '">',
	    '<div class="quickClose"><span class="glyphicon glyphicon-remove"></span></div>',
	    '<label for="code' + n + '" lang="pl">Kod programu:</label>',
	    '<label for="code' + n + '" lang="en">Program code:</label>',
	    '<div class="textbox">',
		'<div class="lines">1\n2\n3\n4\n9999</div>',
		'<div class="textareabox">',
		    '<textarea class="code form-control" rows="10" id="code' + n + '"></textarea>',
		"</div>",
	    "</div>",

	    '<div class="stats">stats</div>',

	    '<div class="progBtns">',
		'<button class="progRun btn btn-primary pull-right" proc="' + n + '">',
		    '<span class="glyphicon glyphicon-play"></span>',
		    '<span lang="pl">Uruchom program</span>',
		    '<span lang="en">Run program</span>',
		"</button>",

		'<div class="dropdown pull-right">',
		    '<button class="dropdown-toggle btn btn-normal" proc="' + n + '" data-toggle="dropdown">',
			'<span class="glyphicon glyphicon-cog"></span>',
			'<span lang="pl">Więcej</span>',
			'<span lang="en">More</span>',
		    "</button>",
		    a,
		"</div>",
	    "</div>",
	"</div>"
    ].join("\n"));

    // @param t is here
    // @const a is here
    $('[aria-controls="biblioteka"]').parent().before([
	'<li role="presentation" class="dropdown">',
	    '<a class="dropdown-toggle" href="#prog' + n + '" proc="' + n + '" aria-controls="prog' + n + '" role="tab" data-toggle="tab">',
		'<span class="glyphicon glyphicon-edit"></span> <span class="name">' + t + '</span> <span class="mydd glyphicon glyphicon-triangle-bottom"></span>',
	    "</a>",
	    a,
	"</li>"
    ].join("\n"));
    // end of @param t scope

    $('[proc="' + n + '"]').click();

    // @param e is here
    $("#code" + n).val(e).focus();
    // end of @param e scope

    $('a[proc="' + n + '"]').on("click", function () {
	setTimeout(function (t) {
	    $("#term" + t).focus()
	}, 10, $(this).attr("proc"))
    });

    $("#langs .selected").click();

    $(".active .code").unbind("keyup").keyup(function (t) {
	if (8 == t.which) {
	    var e = this.rows;
	}

	this.rows = this.scrollHeight / parseInt($(".active .code").css("line-height"))
	for (; this.rows > 10 && this.clientHeight >= this.scrollHeight;) {
	    this.rows--;
	}

	for (; this.clientHeight < this.scrollHeight;) {
	    this.rows++;
	}
	
	if (e != this.rows) {
	    for (var n = [], a = 1; a <= this.rows; a++) {
		n.push(a % 1e4);
	    }
	    $(".active .lines").html(n.join("\n"))
	}

	updateStats();
    }).keyup();

    $(".mydd").unbind("click").click(function (t) {
	if ($(this).parent().parent().hasClass("active")) {
	    t.preventDefault();
	    t.stopPropagation();
	    var e = $(this).parent().next();
	    $(".dropdown-menu .active").removeClass("active");
	    e.css({
		display: "block" == e.css("display") ? "none" : "block"
	    })
	}
    });

    $(".progRename").unbind("click").click(function () {
	var t;
	switch (LANG) {
	case "pl":
	    t = "Podaj nową nazwę:";
	    break;
	default:
	    t = "Write new name:"
	}
	var e = prompt(t, $(".nav .active .name").html());
	e && $.trim(e) && $(".nav .active .name").html(e);
    });

    $(".progSave").unbind("click").click(function () {
	var t = $(".nav .active .dropdown-toggle");
	download(
	    t.find(".name").html() + ".malbolge",
	    $("#code" + t.attr("proc")).val()
	);
    });

    $(".progClose").unbind("click").click(function (t) {
	t.preventDefault(), t.stopPropagation();
	var e = $(".nav .active .dropdown-toggle").attr("proc");
	delete PROC[e], PROC[e] = null;
	var n = $(".nav .active");
	n.next().find("a").eq(0).click();
	$(".tab-content>div").eq(n.index()).remove();
	n.remove();
    });

    $(".progEcho, #textToCode").unbind("click").click(function () {
	var t;
	switch (LANG) {
	case "pl":
	    t = "Wpisz tekst który ma być zamieniony na kod";
	    break;
	default:
	    t = "Write what you want to translate into code"
	}

	var e = prompt(t, "Hello World!\n");
	if ( e ) {
	    gen.translate(e);
	    gen.spinner = 0;
	    takeNextStep();
	}
    });

    $(".progRun").unbind("click").click(function () {
	var t = $(this).attr("proc");
	if ( ! $("#prog" + t + " .terminal").length ) {
	    $("#prog" + t + " .quickClose").after([
		'<div class="termBox">',
		    "<label>Terminal:</label>",
		    '<textarea class="terminal form-control" rows="4" id="term' + t + '"></textarea>',
		    '<div class="progBtns">',
			'<button class="termClose btn btn-primary pull-right" proc="' + t + '" title="Ctrl + X">',
			    '<span class="glyphicon glyphicon-remove"></span>',
			    '<span lang="pl">Zamknij terminal</span>',
			    '<span lang="en">Close terminal</span>',
			"</button>",

			'<button class="progPause btn btn-primary pull-right" proc="' + t + '" title="Ctrl + P">',
			    '<span class="glyphicon glyphicon-pause"></span>',
			    '<span lang="pl">Zatrzymaj</span>',
			    '<span lang="en">Pause</span>',
			"</button>",

		'<button class="progRestart btn btn-primary pull-right" proc="' + t + '" title="Ctrl + R">',
		'<span class="glyphicon glyphicon-repeat"></span>',
		'<span lang="pl">Uruchom ponownie</span>',
		'<span lang="en">Run again</span>',
		"</button>",
		'<button class="progMore btn btn-default pull-right" proc="' + t + '" title="Ctrl + D">',
		'<span class="glyphicon glyphicon-cog"></span>',
		'<span lang="pl">Zaawansowane</span>',
		'<span lang="en">Advanced</span>',
		"</button>",
		"</div>",
		"</div>"
	    ].join("\n"));

	    $("#term" + t).parent().hide();

	    $("#langs .selected").click();

	    $(".termClose").unbind("click").click(function () {
		var t = $(this).attr("proc");
		PROC[t].stop();
		$("#prog" + t + " .progRun").removeClass("disabled");
		$("#code" + t).removeAttr("readonly").focus();
		$(this).parent().parent().slideUp(function () {
		    $(this).remove();
		});
	    });

	    $(".progPause").unbind("click").click(function () {
		var t = $(this).attr("proc");
		PROC[t].pause = !PROC[t].pause, $(this).find("span").eq(0).attr("class", "glyphicon glyphicon-" + (PROC[t].pause ? "play" : "pause")), PROC[t].pause ? $("#term" + t).blur().attr("readonly", "readonly") : $("#term" + t).removeAttr("readonly").focus()
	    });

	    $(".progRestart").unbind("click").click(function () {
		var t = $(this).attr("proc");
		$("#term" + t).val("").removeAttr("readonly").focus();
		$('.progPause[proc="' + t + '"]').removeClass("disabled");
		$(this).prev().find("span").eq(0).attr("class", "glyphicon glyphicon-pause");
		$(this).prev().find("span").eq(1).html("Zatrzymaj");
		PROC[t].reset();
		PROC[t].run();
	    });

	    $(".progMore").unbind("click").click(function () {
		var t = $(this).attr("proc");
		$("#prog" + t + " .raport").length ? $("#prog" + t + " .raport").remove() : ($("#prog" + t + " .termBox").append('<div class="sep"></div>						<div class="raport" id="raport' + t + '">...</div>'), raport(t, !0))
	    });
	} // LONG if body

	$("#prog" + t + " .progRun").addClass("disabled");
	$("#code" + t).attr("readonly", "readonly");
	$("html, body").animate({
	    scrollTop: "280"
	}, "300", "swing");

	$("#term" + t).parent().slideDown(function () {
	    $("#term" + t).focus().unbind("keydown").keydown(function (e) {
		PROC[t].input(e), PROC[t].run()
	    }), PROC[t].stdout = $("#term" + t)[0], PROC[t].code = $("#code" + t).val();
	    var e = PROC[t].reset();
	    if ("OK" != e.status) {
		var n = "";
		switch (e.type) {
		case 0:
		    switch (LANG) {
		    case "pl":
			n = "Nieprawidłowy znak na pozycji: ";
			break;
		    default:
			n = "Invalid char at: "
		    }
		    n += e.pos + " (" + e.val + ")";
		    break;
		case 1:
		    switch (LANG) {
		    case "pl":
			n = "Źródło jest zakrótkie.";
			break;
		    default:
			n = "Source is too short."
		    }
		}
		return alert(n), void $("#prog" + t + " .termClose").click()
	    }
	    PROC[t].endmsg = t, PROC[t].onend = onend, PROC[t].run()
	})
    });

    $(".quickClose").unbind("click").click(function () {
	$(".nav .active .progClose").click()
    })
} // @function newProg

function onend(t) {
    $("#term" + t).blur().attr("readonly", "readonly"), $('.progPause[proc="' + t + '"]').addClass("disabled")
}

function sp1(t, e) {
    for (var n = "" + t; n.length < e;) n = " " + n;
    return n
}

function updateStats() {
    var t, e, n = $(".active textarea").val();
    switch (LANG) {
    case "pl":
	t = "rozmiar: ", e = "linii: ";
	break;
    default:
	t = "size: ", e = "lines: "
    }
    $(".active .stats").html('<span lang="' + LANG + '">' + t + sp1(n.length, 4) + "     " + e + n.split("\n").length + "</span>")
}

function raport(t, e) {
    if (e || !PROC[t].pause && !PROC[t].end) {
	for (var n = "", a = 0; maxT >= a; a++) a % 9 == 0 ? n += "\n" + turn(a) + "   " : a % 3 == 0 && (n += "  "), n += turn(PROC[t].mem[a]) + " ";
	var i, s, o;
	switch (LANG) {
	case "pl":
	    i = "rejestr a: ", s = "rejestr c: ", o = "rejestr d: ";
	    break;
	default:
	    i = "register a: ", s = "register c: ", o = "register d: "
	}
	var r = i + turn(PROC[t].a) + "     " + s + turn(PROC[t].c) + "     " + o + turn(PROC[t].d) + "\n" + n;
	$("#raport" + t).html(r)
    }
}

function mkList(t) {
    var e = [],
	n = 0;

    let saveStr = "save file", loadStr = "load project";
    switch (LANG) {
    case "pl":
	saveStr = "zapisz plik", loadStr = "załaduj projekt";
	break;
    }

    for (var a in t) {
	e.push(['<div class="row bibloEl">', '<div class="lp col-xs-1">' + ++n + ".</div>", '<div class="nazwa col-xs-3">' + t[a].nazwa + "</div>", '<div class="opis col-xs-6">' + t[a].opis + "</div>", '<div class="loadBtn col-xs-2">', '<a href="/malbolge/' + t[a].plik + '.malbolge" class="btn btn-primary btn-xs" download="' + t[a].plik + '.malbolge" title="' + saveStr + '" target="_blank">', '<span class="glyphicon glyphicon-save"></span>', "</a>", '<button class="btn btn-primary btn-xs" rel="' + t[a].plik + '" title="' + loadStr + '">', '<span class="glyphicon glyphicon-play-circle"></span>', "</button>", "</div>", "</div>"].join("\n"));
    }
    return e.join("\n")
}

/**
 * @class MALBOLGE
 */
function MALBOLGE() {
    this.mem = [];
    this.code = "";

    this.a = 0;
    this.c = 0;
    this.d = 0;

    /**
     * @param state {0|1|2|3}
     * @description
     * 0: stop
     */
    this.state = 0;

    this.stdout = null;
    this.end = !1;
    this.endmsg = "";
    this.onend = null;
    this.pause = !1;
    this.tc = 0;

    this.reset = function () {
	this.mem = [];
	this.a = 0;
	this.c = 0;
	this.d = 0;
	this.state = 0;
	this.pause = !1;
	this.end = !1;
	this.tc = 0;

	for (var t = 0, e = 0; t < this.code.length; t++)
	    if (!(this.code.charCodeAt(t) < 33)) {
		if (this.mem[e] = this.code.charCodeAt(t), $.inArray((this.mem[e] + e) % 94, [4, 5, 23, 39, 40, 62, 68, 81]) < 0) return {
		    status: "NOK",
		    type: 0,
		    pos: t,
		    val: this.mem[e] + e
		};
		e++
	    } if (2 > e) return {
	    status: "NOK",
	    type: 1
	};
	for (; maxT >= e; e++) this.mem[e] = this.crz(this.mem[e - 2], this.mem[e - 1]);
	return {
	    status: "OK"
	}
    };

    this.crz = function (t, e) {
	for (var n = 0, a = 1, i = 0; 10 > i; i++) n += [1, 0, 0, 1, 0, 2, 2, 2, 1][t % 3 * 3 + e % 3] * a, t = ~~(t / 3), e = ~~(e / 3), a *= 3;
	return n
    };

    this.run = function () {
	if (!(this.state > 1 || this.pause || this.end)) {
	    this.state = 3;
	    for (var t = 1e3; t-- && !this.end;) switch (this.tc++, this.c %= maxT + 1, this.d %= maxT + 1, (this.mem[this.c] + this.c) % 94) {
	    case 4:
		this.c = this.mem[this.d], this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 5:
		this.stdout.value += String.fromCharCode(this.a % 256), this.stdout.scrollTop = 1e7, this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 23:
		this.state = 2;
		break;
	    case 39:
		var e = this.mem[this.d];
		e = e % 3 * 19683 + ~~(e / 3), this.mem[this.d] = e, this.a = e, this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 40:
		this.d = this.mem[this.d], this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 62:
		var e = this.crz(this.mem[this.d], this.a);
		this.mem[this.d] = e, this.a = e, this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 68:
		this.encrypt(this.c), this.c++, this.d++;
		break;
	    case 81:
		this.encrypt(this.c), this.state = 0, this.end = !0, this.onend && this.onend(this.endmsg);
		break;
	    default:
		this.encrypt(this.c), this.c++, this.d++
	    }
	    3 == this.state && (this.state = 1)
	}
    };

    this.input = function (t) {
	if (t.ctrlKey || (t.preventDefault(), t.stopPropagation()), 2 == this.state) {
	    var e = t.which;
	    9 == e || e > 15 && 20 > e || 91 == e || (13 == e && (e = 10), e = 255 & t.key.charCodeAt(0), 122 == e && t.ctrlKey && (e = 0), (8 == t.which || 13 == t.which || 27 == t.which || 35 == t.which || 36 == t.which || 45 == t.which || 46 == t.which) && (e = t.which), this.a = e, this.encrypt(this.c), this.c++, this.d++, this.state = 1)
	}
    };

    this.encrypt = function (t) {
	t = (t + 1 + maxT) % (maxT + 1), this.mem[t] = [57, 109, 60, 46, 84, 86, 97, 99, 96, 117, 89, 42, 77, 75, 39, 88, 126, 120, 68, 108, 125, 82, 69, 111, 107, 78, 58, 35, 63, 71, 34, 105, 64, 53, 122, 93, 38, 103, 113, 116, 121, 102, 114, 36, 40, 119, 101, 52, 123, 87, 80, 41, 72, 45, 90, 110, 44, 91, 37, 92, 51, 100, 76, 43, 81, 59, 62, 85, 33, 112, 74, 83, 55, 50, 70, 104, 79, 65, 49, 67, 66, 54, 118, 94, 61, 73, 95, 48, 47, 56, 124, 106, 115, 98][this.mem[t] % 94]
    };

    this.stop = function () {
	this.state = 0
    }
}

function turn(t) {
    for (var e = [], n = 0; 10 > n; n++) e.unshift(t % 3), t = ~~(t / 3);
    return e.join("")
}

function c(t, e) {
    for (t -= e; 33 > t;) t += 94;
    return String.fromCharCode(t)
}

/**
 * @class mb
 */
function mb(t) {
    function e() {
	for (var t, e = !0, n = 0; e;) t = (p[n] || 0) + 1, e = t > 2, p[n++] = t % 3
    }

    function n(t, e) {
	for (t -= e; 33 > t;) t += 94;
	return t
    }

    function a(t) {
	return ~~(t / 3) + t % 3 * 19683
    }

    function i(t, e) {
	for (var n = 0, a = 1, i = 0; 10 > i; i++) n += [1, 0, 0, 1, 0, 2, 2, 2, 1][t % 3 * 3 + e % 3] * a, a *= 3, t = ~~(t / 3), e = ~~(e / 3);
	return n
    }
    var s, o, r, l, c, p, h, d, g, u = !1,
	v = !1,
	m = !1,
	f = "";
    this.nextStep = function () {
	if (u && !v) {
	    if (v = !0, s >= f.length) return u = !1, v = !1, m = !0, r.length || r.push(n(68, r.length)), void r.push(n(81, r.length));
	    if (o = f.charCodeAt(s), 32 > o || o > 127) return v = !1, void s++;
	    for (var t = Math.pow(3, 9); t;) {
		h = l, d = r.length;
		for (var c = 0; c < p.length; c++) {
		    switch (p[c]) {
		    case 0:
			break;
		    case 1:
			g = n(39, d), h = a(g);
			break;
		    case 2:
			g = n(62, d), h = i(g, h)
		    }
		    d++
		}
		if (h % 256 == o) {
		    for (var c = 0; c < p.length; c++) switch (p[c]) {
		    case 0:
			r.push(n(68, r.length));
			break;
		    case 1:
			r.push(n(39, r.length));
			break;
		    case 2:
			r.push(n(62, r.length))
		    }
		    return r.push(n(5, r.length)), l = h, s++, v = !1, p = [], void this.nextStep()
		}
		e(), t--
	    }
	    l = a(n(39, r.length)), r.push(n(39, r.length)), v = !1
	}
    };
    this.translate = function (t) {
	u || (u = !0, m = !1, f = t, r = [], s = 0, l = 0, c = 0, p = [])
    };
    this.isRunning = function () {
	return u
    };
    this.isDone = function () {
	return m
    };
    this.code = function () {
	for (var t = [], e = 0; e < r.length; e++) t.push(String.fromCharCode(r[e]));
	return t.join("")
    };
    this.getN = function () {
	return s
    };
    this.str = function () {
	return f
    };
    this.percent = function () {
	return Math.round(1e3 * s / f.length) / 10
    };
    this.cancel = function () {
	u = !1, m = !1
    };

    t && this.translate(t)
} // function mb

var PROC = [],
    LANG = "en",
    maxT = Math.pow(3, 10) - 1,
    debug = true,
    gen = new mb,
    /**
     * @global @const edu
     * @description
     * List of preloadable programs.
     */
    edu = {
	pl: [{
	    nazwa: "Hello World",
	    opis: "Dobry na początek.",
	    plik: "Hello World"
	}, {
	    nazwa: "Hello World (krótko)",
	    opis: "To samo co wyżej, ale bez komentarzy.",
	    plik: "Hello World (mini)"
	}, {
	    nazwa: "99 Bottles",
	    opis: "99 butelek ... - wypisuje tekst popularnej pijackiej piosnki.",
	    plik: "99 Bottles"
	}, {
	    nazwa: "cat",
	    opis: "Wyświetla symbole wprowadzone na wejście.",
	    plik: "cat"
	}, {
	    nazwa: "Quine",
	    opis: "Wypisuje swoje źródło.",
	    plik: "quine"
	}],
	en: [{
	    nazwa: "Hello World",
	    opis: "For the good start.",
	    plik: "Hello World"
	}, {
	    nazwa: "Hello World (short)",
	    opis: "Same as above, but without comments.",
	    plik: "Hello World (mini)"
	}, {
	    nazwa: "99 Bottles",
	    opis: "99 Bottles of Beer ... - strange song.",
	    plik: "99 Bottles"
	}, {
	    nazwa: "cat",
	    opis: "Shows on screen what user is typing.",
	    plik: "cat"
	}, {
	    nazwa: "Quine",
	    opis: "Prints it's own source.",
	    plik: "quine"
	}]
    }; // var edu

/**
 * DOM manipulator
 */
$(function () {
    $("#year").html((new Date).getFullYear());

    $(document).click(function () {
	$(".dropdown-menu").removeAttr("style")
    }).keydown(function (t) {
	if ( ( "r" == t.key || "R" == t.key ) && t.ctrlKey ) {
	    $(".tab-content .active .progRun").is(".disabled") || $(".tab-content .active .progBtns>.progRun").click();
	    $(".tab-content .active .progRestart").length && $(".tab-content .active .progRestart").click();
	    $(".tab-content .active .progRun").length && t.preventDefault();
	}

	if ( ( "p" == t.key || "P" == t.key ) && t.ctrlKey ) {
	    $(".tab-content .active .progPause").click();
	    t.preventDefault();
	}
	
	if ( ( "x" == t.key || "X" == t.key ) && t.ctrlKey ) {
	    $(".tab-content .active .termClose").click();
	}

	if ( ( "d" == t.key || "D" == t.key ) && t.ctrlKey ) {
	    $(".tab-content .active .progMore").click();
	    t.preventDefault();
	}

	if ( ( "n" == t.key || "N" == t.key ) && t.ctrlKey ) {
	    $("#newProg").click();
	    t.preventDefault();
	}

	if ( ( "s" == t.key || "S" == t.key ) && t.ctrlKey ) {
	    $(".nav .active .progSave").click();
	    t.preventDefault();
	}

	if ( ( "i" == t.key || "I" == t.key ) && t.ctrlKey ) {
	    $(".nav .active .progEcho").click();
	    t.preventDefault();
	}

	if ( ( "ArrowLeft" == t.key || "Left" == t.key ) && t.ctrlKey ) {
	    $(".nav .active").index() > 0 && $(".nav .active").prev().find("a").eq(0).click();
	    t.preventDefault();
	}

	if ( ( "ArrowRight" == t.key || "Right" == t.key ) && t.ctrlKey ) {
	    $(".nav .active").next() && $(".nav .active").next().find("a").eq(0).click();
	    t.preventDefault();
	}
    }); // keydown

    $("#langs .lang").mouseenter(function () {
	$(this).find(".fullLang").stop().animate({
	    width: "80px"
	})
    }).mouseleave(function () {
	$("#langs .lang").find(".fullLang").stop().animate({
	    width: 0
	})
    }).click(function () {
	$("#langs .selected").removeClass("selected");
	$(this).addClass("selected");
	LANG = $(this).attr("rel");
	$("[lang]").addClass("hide");
	$('[lang="' + LANG + '"]').removeClass("hide");
	$("#edu").html(mkList(edu[LANG]));
	$("#eduC").html("(" + edu[LANG].length + ")");
	$("#edu button, #ambitne button").click(function () {
	    loadMalbolgeFile($(this).attr("rel"))
	});
    });

    const langName = navigator.languages && navigator.languages[0] || navigator.language;
    if (langName) {
	LANG = langName.split("-")[0];
    }

    const PREPARED_LANGS = [ "pl" ];
    $.inArray(LANG, PREPARED_LANGS) < 0 && (LANG = "en");

    $('#langs [rel="' + LANG + '"]').click(), $("#newProg").click(function () {
	switch (LANG) {
	case "pl":
	    newProg("Nowy program", "");
	    break;
	default:
	    newProg("New program", "")
	}
    });

    var t = ("" + document.location).split("?");
    if (t.length > 1) {
	var e = false;

	t = t[1];
	"run:" == t.substr(0, 4) && (e = !0, t = t.substr(4));
	t = decodeURIComponent(t);

	var n = /^([^\+\-\.\,\[\]<>]*)/g.exec(t);
	if (n = n[0], t = t.substr(n.length), n = $.trim(n), !n) {
	    switch (LANG) {
	    case "pl":
		n = "Nowy program";
		break;
	    default:
		n = "New program"
	    }
	}

	t.length && (newProg(n, t), e && $(".tab-content .active .progRun").click());
    } else {
	loadMalbolgeFile("Hello World");
    }

    document.ondragover = function (t) {
	t.preventDefault();
	if ( ! $("#dnd").length ) {
	    $("body").append('<input id="dnd" type="file" style="display: block; position: fixed; width: 100%; height: 100%; z-index: 100; top: 0; bottom: 0; left: 0; right: 0; opacity: 0"></input>');

	    $("#dnd").click(function () {
		$("#dnd").remove()
	    });

	    $("#dnd")[0].ondrop = function (t) {
		if (t.preventDefault(), t.dataTransfer && t.dataTransfer.files) {
		    for (var e = 0; e < t.dataTransfer.files.length; e++) {
			var n = t.dataTransfer.files[e].name,
			    a = n.split("."),
			    i = a.pop().toLowerCase();
			if ("malbolge" == i || "txt" == i) {
			    var s = new FileReader;
			    s.onload = function (t) {
				newProg(a.join("."), t.target.result), $("#dnd").remove();
			    };
			    s.readAsText(t.dataTransfer.files[e]);
			} else {
			    $("#dnd").remove();
			    var errmsg = "This script can only run TXT and MALBOLGE files\nFile: " + n + " doesn't match.";
			    switch (LANG) {
			    case "pl":
				errmsg = "Ten skrypt obsługuje tylko pliki TXT i MALBOLGE\nPlik: " + n + " się nie łapie.";
				break;
			    }
			    alert(errmsg);
			}
		    }
		}
	    };
	}
    }; // document.ondragover

    $("#ad").mouseenter(function () {
	$("#ad").stop().animate({
	    right: 0,
	    opacity: 1
	})
    }).mouseleave(function () {
	$("#ad").stop().animate({
	    right: "-270px",
	    opacity: .2
	})
    });

    $("#newBtn").click(function (t) {
	t.preventDefault(), t.stopPropagation(), $("#newProg").click()
    });

    // beginning of something?
    setInterval(flow, 50)
});
